%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2011-08-27 21:59:02

-module(ux_unicode_language_identifier).

-export([alphanum/0, decode/2, extlang/0, sep/0,
	 'unicode-language-id'/0, 'unicode-language-subtag'/0,
	 'unicode-region-subtag'/0, 'unicode-script-subtag'/0,
	 'unicode-variant-subtag'/0]).

-include("ux_unicode_language_identifier.hrl").

decode('unicode-language-id', Str) ->
    ('unicode-language-id'())(Str);
decode(sep, Str) -> (sep())(Str);
decode('unicode-language-subtag', Str) ->
    ('unicode-language-subtag'())(Str);
decode(extlang, Str) -> (extlang())(Str);
decode('unicode-script-subtag', Str) ->
    ('unicode-script-subtag'())(Str);
decode('unicode-region-subtag', Str) ->
    ('unicode-region-subtag'())(Str);
decode('unicode-variant-subtag', Str) ->
    ('unicode-variant-subtag'())(Str);
decode(alphanum, Str) -> (alphanum())(Str).

'unicode-language-id'() ->
    fun (T) ->
	    __P = '__alt'([fun ([C1, C2, C3, C4 | Tl])
				   when (C1 == 114) or (C1 == 82),
					(C2 == 111) or (C2 == 79), (C3 == 111) or (C3 == 79),
					(C4 == 116) or (C4 == 84) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   '__seq'(['unicode-language-subtag'(),
				    '__repeat'(0, 1,
					       '__seq'([sep(), 'unicode-script-subtag'()])),
				    '__repeat'(0, 1,
					       '__seq'([sep(), 'unicode-region-subtag'()])),
				    '__repeat'(0, infinity,
					       '__seq'([sep(),
							'unicode-variant-subtag'()]))])]),
	    __P(T)
    end.

sep() ->
    fun (T) ->
	    __P = fun ([C | Tl]) when C == 45 -> {ok, C, Tl};
		      ([C | Tl]) when C == 95 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'unicode-language-subtag'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'(['__repeat'(2, 3, 'ALPHA'()),
				    '__repeat'(0, 1,
					       '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
							    (_) -> fail
							end,
							extlang()]))]),
			   '__repeat'(4, 4, 'ALPHA'()),
			   '__repeat'(5, 8, 'ALPHA'())]),
	    __P(T)
    end.

extlang() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(3, 3, 'ALPHA'()),
			   '__repeat'(0, 2,
				      '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
						   (_) -> fail
					       end,
					       '__repeat'(3, 3, 'ALPHA'())]))]),
	    __P(T)
    end.

'unicode-script-subtag'() ->
    fun (T) -> __P = '__repeat'(4, 4, 'ALPHA'()), __P(T)
    end.

'unicode-region-subtag'() ->
    fun (T) ->
	    __P = '__alt'(['__repeat'(2, 2, 'ALPHA'()),
			   '__repeat'(3, 3, 'DIGIT'())]),
	    __P(T)
    end.

'unicode-variant-subtag'() ->
    fun (T) ->
	    __P = '__alt'(['__repeat'(5, 8, alphanum()),
			   '__seq'(['DIGIT'(), '__repeat'(3, 3, alphanum())])]),
	    __P(T)
    end.

alphanum() ->
    fun (T) -> __P = '__alt'(['ALPHA'(), 'DIGIT'()]), __P(T)
    end.

'__alt'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, _R, _T1} = Res -> Res;
	      fail ->
		  case Ps of
		    [] -> fail;
		    _ -> ('__alt'(Ps))(T)
		  end
	    end
    end.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
	      {ok, R1, T1} ->
		  case ('__repeat'(Min, Max, P, Found + 1))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail when Found >= Min -> {ok, [R1], T1};
		    fail -> fail
		  end;
	      fail when Found >= Min -> {ok, [], T};
	      fail -> fail
	    end
    end.

'__seq'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} ->
		  case ('__seq'(Ps))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end;
'__seq'([]) -> fun (T) -> {ok, [], T} end.
